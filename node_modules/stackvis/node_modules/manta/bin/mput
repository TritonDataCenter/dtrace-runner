#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var fs = require('fs');
var path = require('path');
var url = require('url');

var backoff = require('backoff');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var once = require('once');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');



///--- Globals

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: restify.bunyan.serializers
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['copies', 'c'],
            type: 'positiveInteger',
            help: 'number of copies to make',
            helpArg: 'COPIES',
            'default': 2
        },
        {
            names: ['file', 'f'],
            type: 'string',
            help: 'local file to upload',
            helpArg: 'FILE'
        },
        {
            names: ['header', 'H'],
            type: 'arrayOfString',
            help: 'HTTP headers to include',
            helpArg: 'HEADER'
        },
        {
            names: ['quiet', 'q'],
            type: 'bool',
            help: 'disable the progress bar'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (!err)
        return;

    if (err.name === 'OperationNotAllowedOnRootDirectoryError' ||
        err.name === 'OperationNotAllowedOnDirectoryError') {
        console.error('mput: Cannot write to a directory; ' +
                      'specify full object path');
    } else if (err.name === 'PreconditionFailedError') {
        console.error('mput: Cannot write because HTTP precondition not met.');
    } else {
        console.error('mput: ' + err.toString());
    }

    process.exit(1);
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path...');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'path...');

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path...');

    ifError(manta.assertPath(opts._args[0], true));
    opts.path = manta.path(opts._args[0], true);

    opts.headers = {};
    (opts.header || []).forEach(function (h) {
        if (h.indexOf(':') === -1) {
            manta.cli_usage(OPTIONS_PARSER,
                            'header must be in the form of "[header]: value"',
                            'path...');
        }
        var tmp = h.split(':');
        opts.headers[tmp[0]] = tmp[1].trim();
    });

    return (opts);
}


function printEntry(obj) {
    console.log('%j', obj);
}



///--- Mainline

(function main() {
    var bar = null;
    var options = parseOptions();

    var client = manta.createBinClient(options);
    var opts = {
        copies: options.copies,
        headers: options.headers
    };

    function put(stream, stats, cb) {
        client.info(options.path, function (info_err, info) {
            if (info_err && info_err.statusCode !== 404) {
                    if (cb) {
                        cb(info_err);
                    } else {
                        ifError(info_err);
                    }
            } else if (info) {
                if (info.type === 'application/x-json-stream; type=directory') {
                    if (!options.file) {
                        console.error('cannot infer name without -f');
                        process.exit(1);
                    } else {
                        options.path += '/' + path.basename(options.file);
                    }
                }
            }

            if (!options.quiet && Boolean(process.stderr.isTTY)) {
                bar = new manta.ProgressBar({
                    filename: options.path,
                    size: stats ? stats.size : undefined,
                    nosize: stats ? false : true
                });
                stream.on('data', function (data) {
                    bar.advance(data.length);
                });
                stream.once('end', function () {
                    bar.end();
                });
            }

            client.put(options.path, stream, opts, function (err) {
                if (err) {
                    if (cb) {
                        cb(err);
                    } else {
                        ifError(err);
                    }
                }
                client.close();
                if (cb)
                    cb();
            });
        });
    }

    if (options.file) {
        fs.stat(options.file, function (err, stats) {
            ifError(err);

            if (!stats.isFile()) {
                console.error(options.file + ' is not a file');
                process.exit(1);
            }

            opts.size = stats.size;

            function write(_, cb) {
                cb = once(cb);
                var fstream = fs.createReadStream(options.file);
                fstream.pause();
                fstream.on('open', function () {
                    put(fstream, stats, cb);
                });
            }

            var retry = backoff.call(write, null, ifError);
            retry.setStrategy(new backoff.ExponentialStrategy({
                initialDelay: 1000,
                maxDelay: 10000
            }));
            retry.failAfter(3);
            retry.on('backoff', function (num, delay, error) {
                // If we set a HTTP/1.1 Conditional PUT header and the
                // precondition was not met, then bail out without retrying:
                if (error && error.name === 'PreconditionFailedError')
                    ifError(error);
                LOG.debug({
                    err: error,
                    num: num,
                    delay: delay
                }, 'request failed. %s', num === 3 ? 'fail' : 'retrying');
            });
            retry.start();
        });
    } else {
        put(process.stdin);
    }
})();
