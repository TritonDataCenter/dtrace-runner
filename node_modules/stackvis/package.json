{
  "name": "stackvis",
  "version": "0.2.0",
  "description": "stack visualization tools",
  "main": "./lib/stackvis.js",
  "bin": {
    "flamegraph": "./cmd/flamegraph",
    "stackcollapse": "./cmd/stackcollapse",
    "stackcollapse-perf": "./cmd/stackcollapse-perf",
    "stackcollapse-stap": "./cmd/stackcollapse-stap",
    "stackvis": "./cmd/stackvis"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/davepacheco/node-stackvis.git"
  },
  "dependencies": {
    "bunyan": "0.21.4",
    "carrier": "0.1.7",
    "hogan.js": "2.0.0",
    "manta": "1.1.2",
    "node-uuid": "1.4.1",
    "posix-getopt": "1.0.0",
    "vasync": "1.4.0",
    "verror": "1.3.6"
  },
  "license": "MIT",
  "readme": "# node-stackvis\n\nStackvis is a command line tool and JavaScript library for visualizing call\nstacks.  For an example, see\nhttp://us-east.manta.joyent.com/dap/public/stackvis/example.htm.  This approach\n(and the code for the SVG-based flamegraph) is based heavily on Brendan Gregg's\n[FlameGraph](http://github.com/brendangregg/FlameGraph/) tools.\n\n\n## Synopsis\n\nProfile a program for 30 seconds:\n\n    # dtrace -n 'profile-97/pid == $YOURPID/{ @[jstack(80, 8192)] = count(); }' -c \"sleep 30\" > dtrace.out\n\nthen translate the DTrace output into a flame graph:\n\n    # stackvis < dtrace.out > flamegraph.htm\n\nOr, create the flame graph and share it on Joyent's Manta service:\n\n    # stackvis < dtrace.out | stackvis share\n    https://us-east.manta.joyent.com/dap/public/stackvis/298c9ae2-aec8-4993-8bc9-d621dcdbeb71/index.htm\n\n\n## Details\n\nThe default mode assumes input from a DTrace invocation like the above, and\nproduces a D3-based visualization in a self-contained HTML file.  You can\nexplicitly specify input formats:\n\n* \"dtrace\" (the default)\n* \"collapsed\" (more easily grep'd through)\n* \"perf\" (from the Linux \"perf\" tool)\n* \"stap\" (from SystemTap)\n\nas well as output formats:\n\n* \"collapsed\" (see above)\n* \"flamegraph-svg\" (traditional SVG-based flame graph)\n* \"flamegraph-d3\" (the default)\n\nFor example, to read \"collapsed\" output and produce a SVG flamegraph, use:\n\n    # stackvis collapsed flamegraph-svg < collapsed.out > flamegraph.svg\n\nThis module also provides the \"stackcollapse\" and \"flamegraph\" tools, which are\nessentially direct ports of the original FlameGraph tools.  You can use them by\nfirst collecting data as above, then collapse common stacks:\n\n    # stackcollapse < dtrace.out > collapsed.out\n\nthen create a flame graph:\n\n    # flamegraph < collapsed.out > graph.svg\n\nThis approach is a little more verbose, but lets you filter out particular\nfunction names by grepping through the collapsed file.\n\n\n## API\n\nThe command-line tools are thin wrappers around the API, which is built upon a\nsimple internal representation of stack traces and a bunch of Readers\n(lib/input-\\*.json) and Writers (lib/output-\\*.json) for various intermediate\nformats:\n\n- input-dtrace.js: reads stacks from the output of a DTrace profiling script\n- input-collapsed.js: reads data in the form used by the \"stackcollapse\" tool,\n  where function offsets are stripped out, common stacks are collapsed, and\n  there's one stack per line.\n- output-collapsed.js: writes stacks in above \"collapsed\" form\n- output-flamegraph-svg.js: writes stacks as a flame graph SVG\n- output-flamegraph-d3.js: writes stacks as a flame graph HTML file using D3\n\nClient code shouldn't load these directly.  Instead, require 'stackvis' and use\nlookupReader and lookupWriter:\n```javascript\nvar mod_stackvis = require('stackvis');\nvar dtrace_reader = mod_stackvis.readerLookup('dtrace');\nvar collapsed_writer = mod_stackvis.writerLookup('collapsed');\n```\nThe main operation is translating from one representation to another (e.g.,\nDTrace output to a flame graph) using pipeStacks() (which requires a Bunyan\nlogger):\n```javascript\nvar mod_bunyan = require('bunyan');\nvar log = new mod_bunyan({ 'name': 'mytool', 'stream': process.stderr });\nmod_stackvis.pipeStacks(log, process.stdin, dtrace_reader, collapsed_writer,\n    process.stdout, function () { console.error('translation finished'); });\n```\nThis example instantiates a new dtrace_reader to read DTrace output from\nprocess.stdin and then emits the result in collapsed form to process.stdout\nthrough the collapsed_writer.\n\n## Adding new readers and writers\n\nIt's easy to add new readers (for new input sources) and writers (for new types\nof visualizations).  See lib/stackvis.js for an overview of how these interfaces\nwork.\n\n## TODO\n\n- See about dealing with multiple \"silos\" of a single flame graph that are\n  essentially the same, but differ in exactly one frame.\n- Experiment with flame graph coloring.  Current options include random,\n  gradient, and time-based.  Another possibility is to use hue to denote the\n  module and saturation to denote the size of a frame relative to others at the\n  same level of depth.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/davepacheco/node-stackvis/issues"
  },
  "homepage": "https://github.com/davepacheco/node-stackvis",
  "_id": "stackvis@0.2.0",
  "_shasum": "e74eedd1fff606881ba6c32bcd388f7b7d7c643f",
  "_resolved": "https://registry.npmjs.org/stackvis/-/stackvis-0.2.0.tgz",
  "_from": "https://registry.npmjs.org/stackvis/-/stackvis-0.2.0.tgz"
}
