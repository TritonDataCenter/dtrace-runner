#!/usr/bin/env node
// -*- mode: js -*-

var getopt = require('posix-getopt');
var path = require('path');
var SSHAgentClient = require(path.resolve(__dirname, '../lib/ssh_agent_client.js'));



///--- Functions

function usage(msg, code) {
  if (msg)
    console.error(msg);

  var str = 'usage: ' + path.basename(process.argv[1]);
  str += ' key_name ...';
  console.error(str);
  process.exit(code || 0);
}


function parseOptions() {
  var option;
  var parser = new getopt.BasicParser('h', process.argv);
  var tmp;

  while ((option = parser.getopt()) !== undefined && !option.error) {
    switch (option.option) {
    case 'h':
      usage();
      break;

    default:
      usage('invalid option', 1);
      break;
    }
  }

  if (parser.optind() >= process.argv.length)
    usage('missing required argument: "name"');

  return (process.argv.slice(parser.optind()).pop());
}



///--- Mainline

var client = new SSHAgentClient();
var kname = parseOptions();

client.requestIdentities(function(err, keys) {
  if (err) {
    console.error(err.toString());
    process.exit(1);
  }

  var key = keys.filter(function (k) {
    return (k.comment === kname);
  }).pop();

  if (!key)
    usage(kname + ' invalid', 1);

  var data = '';
  process.stdin.resume();
  process.stdin.setEncoding('utf8');

  process.stdin.on('data', function (chunk) {
    data += chunk;
  });

  process.stdin.on('end', function () {
    client.sign(key, new Buffer(data), function(err2, signature) {
      if (err2) {
        console.error(err2.toString());
        process.exit(1);
      }
      console.log(signature.signature);
    });
  });
});
